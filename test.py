import pandas as pd
import folium
df1_y = pd.read_csv(r'C:\DNA\CrimeData1.csv')  # 대검찰청청범죄발생지 2018년도
df2_y = pd.read_csv(r'C:\DNA\CrimeData2.csv')  # 대검찰청청범죄발생지 2019년도

df1_x = pd.read_excel(r'C:\DNA\CCTVData.xlsx')  # CCTV정보들 (주소,   설치연월) 컬럼 이용

pop = pd.read_csv(r'C:\DNA\pop.csv')
#각 범죄 가장 많이 일어난 것들 출력 하고 총합 출력해서 계산 증감도 보면 좋고
#y서울 분류 서울_종로,서울_중구,서울_용산,서울_성동,서울_광진,서울_동대문,서울_중랑,서울_성북,서울_강북,서울_도봉,서울_노원,서울_은평,서울_서대문,서울_마포,서울_양천,서울_강서,서울_구로,
# 서울_금천,서울_영등포,서울_동작,서울_관악,서울_서초,서울_강남,서울_송파,서울_강동
# CCTV 서울만 데이터 가져오기

#데이터를 ex 2018년 5월 부터 제대로 있으니까  2019년 5월 데이터 부터 ~ 2020년 4월까지 12 * 24 = 288개 데이터 회귀
datelist_y = [20180500, 20180600, 20180700, 20180800, 20180900, 20181000, 20181100, 20181200, 20190100, 20190200, 20190300, 20190400,
              20190500, 20190600, 20190700, 20190800, 20190900, 20191000, 20191100, 20191200, 20200100, 20200200, 20200300, 20200400]
total_region = ['종로구', '중구', '용산구', '성동구', '광진구', '동대문구', '중랑구', '성북구',
          '강북구', '노원구', '은평구', '서대문구', '마포구', '양천구', '강서구', '구로구',
          '금천구', '영등포구', '동작구', '관악구', '서초구', '강남구', '송파구', '강동구']

datelist_x = [20190500, 20190600, 20190700, 20190800, 20190900, 20191000, 20191100, 20191200, 20200100, 20200200, 20200300, 20200400,
              20200500, 20200600, 20200700, 20200800, 20200900, 20201000, 20201100, 20201200, 20210100, 20210200, 20210300, 20210400]

#인구수 손실된 2018년도 1월 ~ 4월 데이터 회귀식으로 구하기 print(pop.corr()['총생활인구수'])


#지역 상관 x 월기준 평균 총생활인구수 이 회귀식으로 잃어버린 2018년도 1월 ~ 4월 데이터 생성 후 각 지역 연평균 총생활인구수로 데이터 셋 구성

import statsmodels.api as sm

train_x = list()
test_y = list()
for i in range(0,len(datelist_x)):
    train_x.append(pop[(pop['기준일ID'] > datelist_x[i]) & (pop['기준일ID'] < datelist_x[i] + 32)][["총생활인구수","주간인구수(09~18)","서울외유입인구수"]].sum())
    test_y.append(pop[(pop['기준일ID'] > datelist_y[i]) & (pop['기준일ID'] < datelist_y[i] + 32)]['총생활인구수'].sum())


results = sm.OLS(test_y,sm.add_constant(train_x)).fit()
print(results.summary())



coef = [-28.0589, 28.2793, -6.4014,7.236*(10**8)]#상수는 7.236e+08

to_insert_infor = [ 20190100, 20190200, 20190300, 20190400]

region_2018 = list()

datelist = [20180500, 20180600, 20180700, 20180800, 20180900, 20181000, 20181100, 20181200]
for i in range(0,len(total_region)):
    num = 0
    x = pop[pop['시군구명'] == total_region[i]]

    for j in range(0, len(to_insert_infor)):
        x1 = x[(x['기준일ID'] > to_insert_infor[j]) & (x['기준일ID'] < to_insert_infor[j] + 32)]["총생활인구수"].sum()
        x2 = x[(x['기준일ID'] > to_insert_infor[j]) & (x['기준일ID'] < to_insert_infor[j] + 32)]["주간인구수(09~18)"].sum()
        x3 = x[(x['기준일ID'] > to_insert_infor[j]) & (x['기준일ID'] < to_insert_infor[j] + 32)]["서울외유입인구수"].sum()
        num += (x1 * coef[0] + x2 * coef[1] + x3 * coef[2] + coef[3])
    for j in range(0,len(datelist)):
        num+= x[(x['기준일ID'] > datelist[j]) & (x['기준일ID'] < datelist[j] + 32)]["총생활인구수"].sum()
    num = num/12
    region_2018.append(num)
print(region_2018)
print(len(region_2018))

region_2019 =list()
datelist = [20190100, 20190200, 20190300, 20190400,20190500, 20190600, 20190700, 20190800, 20190900, 20191000, 20191100, 20191200]
for i in range(0,len(total_region)):
    num = 0
    x = pop[pop['시군구명'] == total_region[i]]
    for j in range(0,len(datelist)):
        num += x[(x['기준일ID'] > datelist[j]) & (x['기준일ID'] < datelist[j] + 32)]["총생활인구수"].sum()
    num = num / 12
    region_2019.append(num)
print(region_2019)
print(len(region_2019))

#2018 [268332695.18025208, 274315314.555293, 252505709.40360352, 249142168.8544104, 243623213.52557495, 248049207.91711554, 239505606.90743306, 243414105.05873683, 240435026.69427046, 242274308.76490095, 237971594.87015226, 249983410.06114307, 254206164.20195913, 241479527.55071864, 243032616.811089, 245263691.2117305, 247560581.556427, 261654289.9321353, 241533364.36802444, 237335886.35138956, 271274593.72738653, 291140140.7969622, 253137359.59418714, 241433989.6718892]
#2019 [9954948.548266666, 10713541.171091665, 9552646.090625001, 10676442.656083332, 11888226.918441666, 11497522.11255, 10610898.583291667, 13115688.540699998, 8917762.894824998, 15419017.791466668, 13053803.795683334, 12071287.250908336, 14993229.734458333, 11693030.71825833, 16309504.15675, 12476688.465091666, 7010471.810216666, 15094435.003725, 12351614.010299997, 15020973.397799999, 18073669.907725, 24988427.80548333, 22935894.541983336, 14303044.943258332]

'''

train_x = list()
test_y = list()
for i in range(0,len(datelist_x)):
    train_x.append(pop[(pop['기준일ID'] > datelist_x[i]) & (pop['기준일ID'] < datelist_x[i] + 32)]['일최대이동인구수'].sum())
    test_y.append(pop[(pop['기준일ID'] > datelist_y[i]) & (pop['기준일ID'] < datelist_y[i] + 32)]['일최대이동인구수'].sum())
print(train_x)
print(test_y)
results = sm.OLS(test_y,sm.add_constant(train_x)).fit()
print(results.summary())

for i in range(0,len(total_region)):
    x = pop[pop['시군구명'] == total_region[i]]
    y = pop[pop['시군구명'] == total_region[i]]
    train_x = list()
    test_y = list()
    print(total_region[i] + ' \n 총생활 인구수 회귀식\n \n')
    for j in range(0,len(datelist_x)):
        train_x.append(x[(x['기준일ID'] > datelist_x[j]) & (x['기준일ID'] < datelist_x[j] + 32)][['총생활인구수','동일자치구행정동간이동인구수',"일최대인구수","일최소인구수"]].sum())
        test_y.append(y[(y['기준일ID'] > datelist_y[j]) & (y['기준일ID'] < datelist_y[j] + 32)]['총생활인구수'].sum())

    results = sm.OLS(test_y,sm.add_constant(train_x)).fit()
    print(results.summary())


import statsmodels.api as sm
Index_y = [11700, 12720, 10820, 8785, 11289, 11363, 11353, 9465, 9821, 11615, 10345, 8973, 15886, 10713, 16009, 13874, 10448, 19142, 9273, 16088, 21999, 34757, 20116, 11003]#모든 범죄
Index_y_1 =[5465, 5465, 5694, 4222, 5902, 5885, 6066, 5037, 5127, 3223, 5978, 5374, 4142, 8103, 5506, 6746, 4566, 9397, 4902, 8081, 8601, 13622, 9870, 5592]#5대범죄 + @만 152566개개
Index_x = [1534, 2460, 2039, 2612, 2846, 2502, 4460, 3104, 1267, 1710, 4775, 2940, 1933, 5653, 2867, 3449, 2393, 4307, 6616, 4785, 6222, 6397, 1452, 1577]
print(len(Index_x))
print(len(Index_y))
print(len(Index_y_1))

results = sm.OLS(Index_y_1, sm.add_constant(Index_x)).fit()

print(results.summary())

'''






'''

region = ['서울특별시 종로', '서울특별시 중구', '용산', '서울특별시 성동', '서울특별시 광진', '서울특별시 동대문', '서울특별시 중랑', '서울특별시 성북',
          '서울특별시 강북', '서울특별시 노원', '서울특별시 은평', '서울특별시 서대문', '서울특별시 마포', '양천', '서울특별시 강서', '서울특별시 구로',
          '서울특별시 금천', '서울특별시 영등포', '동작', '서울특별시 관악', '서초', '서울특별시 강남', '서울특별시 송파', '서울특별시 강동']

listup = list()
for i in range(0, len(region)):
    listup.append(pop[pop['기준일ID'].str.contains(region[i])]['카메라대수'].sum())
print(listup)

추가한 것들
'절도' '살인' '강도' '방화' '성폭력' '폭행' '상해' '협박' '공갈' 
'폭력행위등(손괴,강요,주거침입등)' '폭력행위 등(단체 등의 구성,활동)' 
'실화' '주거 침입' '유기' '교통방해' '공무방해' '도주와 범인 은닉' 
'공안을 해하는 죄' '일수와 수리에 관한 죄' '교통사고 처리특례법' 
'도로교통법' '도로교통법(무면허운전)' '도로교통법(사고후미조치)'
 '도로교통법(음주운전)' '도로교통법(음주측정거부)' '도로법’ '특가법(도주차량)' '주차장법’ '집회 및 시위에 관한 법률’ '출입국관리법'
'폐기물관리법'  '화물자동차운수사업법'

'''




#각 구청 별 CCTV볼 때 사용
'''
df = df1_x[df1_x['관리기관명'].str.contains('서울특별시',na=False)]
print(df)
print(df1_x)
'''
'''
df1_s2019 = df1_x[(df1_x['설치연월'] != '2020-01') & (df1_x['설치연월'] != '2020-02') & (df1_x['설치연월'] != '2020-03') & (
            df1_x['설치연월'] != '2020-04') &
                  (df1_x['설치연월'] != '2020-05') & (df1_x['설치연월'] != '2020-06') & (df1_x['설치연월'] != '2020-07') & (
                              df1_x['설치연월'] != '2020-08') & (df1_x['설치연월'] != '2020-09')
                  &
                  (df1_x['설치연월'] != '2020-10') & (df1_x['설치연월'] != '2020-11') & (df1_x['설치연월'] != '2020-12') &
                  (df1_x['설치연월'] != '2021-01') & (df1_x['설치연월'] != '2021-02') & (df1_x['설치연월'] != '2021-03') &
                  (df1_x['설치연월'] != '2021-04') &
                  (df1_x['설치연월'] != '2021-05') & (df1_x['설치연월'] != '2021-06') & (df1_x['설치연월'] != '2021-07') &
                  (df1_x['설치연월'] != '2021-08') & (df1_x['설치연월'] != '2021-09') &
                  (df1_x['설치연월'] != '2021-10') & (df1_x['설치연월'] != '2021-11') & (df1_x['설치연월'] != '2021-12') &
                  (df1_x['설치연월'] != '2022-01') & (df1_x['설치연월'] != '2022-02') & (df1_x['설치연월'] != '2022-03') &
                  (df1_x['설치연월'] != '2022-04') &
                  (df1_x['설치연월'] != '2022-05') & (df1_x['설치연월'] != '2022-06') & (df1_x['설치연월'] != '2022-07') &
                  (df1_x['설치연월'] != '2022-08') & (df1_x['설치연월'] != '2022-09') &
                  (df1_x['설치연월'] != '2022-10') & (df1_x['설치연월'] != '2022-11') & (df1_x['설치연월'] != '2021-12') &
                  (df1_x['설치연월'] != '2020-.7')
                  ]
print(df1_s2019['카메라대수'].sum())
'''
df1_s2018 = df1_x[(df1_x['설치연월'] != '2020-01') & (df1_x['설치연월'] != '2020-02') & (df1_x['설치연월'] != '2020-03') & (df1_x['설치연월'] != '2020-04') &
                      (df1_x['설치연월'] != '2020-05') & (df1_x['설치연월'] != '2020-06') & (df1_x['설치연월'] != '2020-07') & (df1_x['설치연월'] != '2020-08') & (df1_x['설치연월'] != '2020-09')
                      &
                       (df1_x['설치연월'] != '2020-10') & (df1_x['설치연월'] != '2020-11') & (df1_x['설치연월'] != '2020-12') &
                      (df1_x['설치연월'] != '2021-01') & (df1_x['설치연월'] != '2021-02') & (df1_x['설치연월'] != '2021-03') &
                       (df1_x['설치연월'] != '2021-04') &
                        (df1_x['설치연월'] != '2021-05') & (df1_x['설치연월'] != '2021-06') & (df1_x['설치연월'] != '2021-07') &
                         (df1_x['설치연월'] != '2021-08') & (df1_x['설치연월'] != '2021-09') &
                          (df1_x['설치연월'] != '2021-10') & (df1_x['설치연월'] != '2021-11') & (df1_x['설치연월'] != '2021-12') &
                           (df1_x['설치연월'] != '2022-01') & (df1_x['설치연월'] != '2022-02') & (df1_x['설치연월'] != '2022-03') &
                            (df1_x['설치연월'] != '2022-04') &
                             (df1_x['설치연월'] != '2022-05') & (df1_x['설치연월'] != '2022-06') & (df1_x['설치연월'] != '2022-07') &
                              (df1_x['설치연월'] != '2022-08') & (df1_x['설치연월'] != '2022-09') &
                               (df1_x['설치연월'] != '2022-10') & (df1_x['설치연월'] != '2022-11') & (df1_x['설치연월'] != '2021-12') &
                                (df1_x['설치연월'] != '2020-.7') &
                      (df1_x['설치연월'] != '2019-01') & (df1_x['설치연월'] != '2019-02') & (df1_x['설치연월'] != '2019-03') &
                      (df1_x['설치연월'] != '2019-04') &
                      (df1_x['설치연월'] != '2019-05') & (df1_x['설치연월'] != '2019-06') & (df1_x['설치연월'] != '2019-07') &
                      (df1_x['설치연월'] != '2019-08') & (df1_x['설치연월'] != '2019-09') &
                      (df1_x['설치연월'] != '2019-10') & (df1_x['설치연월'] != '2019-11') & (df1_x['설치연월'] != '2019-12')
                      ]

df1_s2019 = df1_x[(df1_x['설치연월'] != '2020-01') & (df1_x['설치연월'] != '2020-02') & (df1_x['설치연월'] != '2020-03') & (
            df1_x['설치연월'] != '2020-04') &
                  (df1_x['설치연월'] != '2020-05') & (df1_x['설치연월'] != '2020-06') & (df1_x['설치연월'] != '2020-07') & (
                              df1_x['설치연월'] != '2020-08') & (df1_x['설치연월'] != '2020-09')
                  &
                  (df1_x['설치연월'] != '2020-10') & (df1_x['설치연월'] != '2020-11') & (df1_x['설치연월'] != '2020-12') &
                  (df1_x['설치연월'] != '2021-01') & (df1_x['설치연월'] != '2021-02') & (df1_x['설치연월'] != '2021-03') &
                  (df1_x['설치연월'] != '2021-04') &
                  (df1_x['설치연월'] != '2021-05') & (df1_x['설치연월'] != '2021-06') & (df1_x['설치연월'] != '2021-07') &
                  (df1_x['설치연월'] != '2021-08') & (df1_x['설치연월'] != '2021-09') &
                  (df1_x['설치연월'] != '2021-10') & (df1_x['설치연월'] != '2021-11') & (df1_x['설치연월'] != '2021-12') &
                  (df1_x['설치연월'] != '2022-01') & (df1_x['설치연월'] != '2022-02') & (df1_x['설치연월'] != '2022-03') &
                  (df1_x['설치연월'] != '2022-04') &
                  (df1_x['설치연월'] != '2022-05') & (df1_x['설치연월'] != '2022-06') & (df1_x['설치연월'] != '2022-07') &
                  (df1_x['설치연월'] != '2022-08') & (df1_x['설치연월'] != '2022-09') &
                  (df1_x['설치연월'] != '2022-10') & (df1_x['설치연월'] != '2022-11') & (df1_x['설치연월'] != '2021-12') &
                  (df1_x['설치연월'] != '2020-.7')
                  ]



'''
list_a = ['서울_종로', '서울_종로', '서울_용산','서울_성동','서울_광진', '서울_동대문', '서울_중랑', '서울_성북', '서울_강북', '서울_도봉', '서울_노원', '서울_은평','서울_서대문',
          '서울_마포', '서울_양천', '서울_구로', '서울_금천', '서울_영등포', '서울_동작', '서울_관악','서울_서초','서울_강남', '서울_송파','서울_강동']
list_b = [0, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 31, 35, 37, 38, 39, 40, 43, 46, 67, 81, 82, 83, 84, 85, 86, 150, 140, 148, 152, 157, 143]


total_list =list()
for i in range(0,len(list_a)):
    a = 0
    for j in range(0,len(list_b)):
        a+=df2_y[list_a[i]][list_b[j]].sum()
    total_list.append(a)
print(total_list)

import statsmodels.api as sm
Index_y = [11700, 12720, 10820, 8785, 11289, 11363, 11353, 9465, 9821, 11615, 10345, 8973, 15886, 10713, 16009, 13874, 10448, 19142, 9273, 16088, 21999, 34757, 20116, 11003]#모든 범죄
Index_y_1 =[5465, 5465, 5694, 4222, 5902, 5885, 6066, 5037, 5127, 3223, 5978, 5374, 4142, 8103, 5506, 6746, 4566, 9397, 4902, 8081, 8601, 13622, 9870, 5592]#5대범죄 + @만 152566개개
Index_x = [1534, 2460, 2039, 2612, 2846, 2502, 4460, 3104, 1267, 1710, 4775, 2940, 1933, 5653, 2867, 3449, 2393, 4307, 6616, 4785, 6222, 6397, 1452, 1577]
print(len(Index_x))
print(len(Index_y))
print(len(Index_y_1))

results = sm.OLS(Index_y_1, sm.add_constant(Index_x)).fit()

print(results.summary())


Index_y = [12132, 13706, 10500, 8846, 11225, 11510, 11491, 9444, 10482, 11463, 10631, 8714, 14814, 10104, 16001, 13421, 10309, 17945, 9625, 15971, 22780, 33898, 20302, 11067]#모든 범죄
Index_y_1 =[5504, 5504, 5244, 4095, 5776, 5657, 6042, 5131, 5346, 3083, 6007, 5225, 4291, 7411, 5118, 6561, 4403, 8860, 5131, 7881, 9033, 13391, 9573, 5717]#5대범죄 + @만 149984개
Index_x = [1559, 2460, 2039, 3103, 2846, 2502, 4460, 3560, 1774, 1972, 6369, 2940, 2316, 5901, 2867, 3723, 2393, 4307, 6616, 4785, 6939, 6397, 2537, 1933]
print(len(Index_x))
print(len(Index_y))
print(len(Index_y_1))
results = sm.OLS(Index_y_1, sm.add_constant(Index_x)).fit()
print(results.summary())








'''



#y서울 분류 서울_종로,서울_중구,서울_용산,서울_성동,서울_광진,서울_동대문,서울_중랑,서울_성북,서울_강북,서울_도봉,서울_노원,서울_은평,서울_서대문,서울_마포,서울_양천,서울_강서,서울_구로,
# 서울_금천,서울_영등포,서울_동작,서울_관악,서울_서초,서울_강남,서울_송파,서울_강동


#y서울 분류 서울_종로,서울_중구,서울_용산,서울_성동,서울_광진,서울_동대문,서울_중랑,서울_성북,서울_강북,서울_도봉,서울_노원,서울_은평,서울_서대문,서울_마포,서울_양천,서울_강서,서울_구로,
# 서울_금천,서울_영등포,서울_동작,서울_관악,서울_서초,서울_강남,서울_송파,서울_강동 도봉구 CCTV개수 -> 1856
'''
region = ['서울특별시 종로', '서울특별시 중구', '용산', '서울특별시 성동', '서울특별시 광진', '서울특별시 동대문', '서울특별시 중랑', '서울특별시 성북',
          '서울특별시 강북', '도봉', '서울특별시 노원', '서울특별시 은평', '서울특별시 서대문', '서울특별시 마포', '양천', '서울특별시 강서', '서울특별시 구로',
          '서울특별시 금천', '서울특별시 영등포', '동작', '서울특별시 관악', '서초', '서울특별시 강남', '서울특별시 송파', '서울특별시 강동']
listup = list()
for i in range(0, len(region)):
    listup.append(df1_s2018[df1_s2018['관리기관명'].str.contains(region[i])]['카메라대수'].sum())
print(listup)

print(df1_s2018['관리기관명'].unique())

'''


#'절도' '살인' '강도' '방화' '성폭력' '폭행' '상해' '협박' '공갈' '폭력행위등(손괴,강요,주거침입등)' '폭력행위 등(단체 등의 구성,활동)' '실화' '주거 침입' '유기' '교통방해' '공무방해' '도주와 범인 은닉' '공안을 해하는 죄' '일수와 수리에 관한 죄' '교통사고 처리특례법' '도로교통법' '도로교통법(무면허운전)' '도로교통법(사고후미조치)' '도로교통법(음주운전)' '도로교통법(음주측정거부)' '도로법’ '특가법(도주차량)'

'''
음란물/풍기문란 - '기타 음란행위' '성매매알선등행위의처벌에관한법률’ '아동,청소년의성보호에관한법률(성매수등)' '아동,청소년의성보호에관한법률(음란물등)' 애매하기 때문에 pass

발화성/위험물질을 길거리에 방치 혹은 저장/대비 - '위험물안전관리법’ '화재예방·소방시설설치유지 및 안전관리에 관한법률' '화학물질관리법' 같은이유로 pass

자동차 관련 법률(보이지는 않는 것이기에 빼도 괜찮을 듯) - '자동차관리법' '자동차손해배상보장법' CCTV로 보기 어렵기 때문에 pass

주차장 관련 보이는 법률(주정차 관련) - '주차장법’ 이건 있어야할 듯 추가

길거리 시위/도로위에서 시위 - '집회 및 시위에 관한 법률’ 이것도 추가

청소년 유해 업소 관련 법률안 - '청소년보호법', '풍속영업의 규제에 관한 법률' 요즘은 풍속점들이 다 패쇄적이고 CCTV로 확인하기 어려움

외국인 관련 출입국 관련 법률안 - '출입국관리법' 이건 추가

관련 운송도 포함되어있기에 다시 생각 - '폐기물관리법'  '화물자동차운수사업법'  이건 추가
'''

